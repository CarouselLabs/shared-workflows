    # In repo: TenantTerraform
    # File: shared-workflows/reusable-serverless-deploy.yml

    name: Reusable Serverless Deployment

    on:
      workflow_call:
        inputs:
          tenant:
            description: 'The tenant to deploy for'
            required: true
            type: string
          stage:
            description: 'The stage to deploy to (dev, prod)'
            required: true
            type: string
          service_name:
            description: 'The name of the service'
            required: true
            type: string
          aws-account-id:
            description: "The AWS Account ID for deployment"
            required: true
            type: string

    jobs:
      deploy-serverless:
        name: Deploy ${{ inputs.service_name }} to ${{ inputs.stage }}
        runs-on: ubuntu-latest
        permissions:
          id-token: write
          contents: read

        steps:
          - name: Generate Token for Orchestration Repo
            id: generate-orchestration-token
            uses: actions/create-github-app-token@v1
            with:
              app-id: ${{ secrets.APP_ID }}
              private-key: ${{ secrets.APP_PRIVATE_KEY }}
              private-key-is-base64: true
              owner: 'CarouselLabs'

          - name: Checkout Orchestration Repo
            uses: actions/checkout@v4
            with:
              repository: CarouselLabs/TenantTerraform
              path: 'orchestration'
              token: ${{ steps.generate-orchestration-token.outputs.token }}

          - name: Install yq
            run: |
              sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
              sudo chmod +x /usr/bin/yq

          - name: Read Tenant Config
            id: tenant-config
            working-directory: orchestration
            env:
              SERVICE_NAME: ${{ inputs.service_name }}
            run: |
              CONFIG_FILE="tenant-configurations/tenants/${{ inputs.tenant }}/config.yml"
              if [ ! -f "$CONFIG_FILE" ]; then
                echo "::error::Tenant configuration file not found at $(pwd)/$CONFIG_FILE"
                exit 1
              fi

              echo "--- Debug: Contents of $CONFIG_FILE ---"
              cat "$CONFIG_FILE"
              echo "--- End Debug ---"
              
              ORG=$(yq e ".tenant.github_org" "$CONFIG_FILE")
              REPO=$(yq e '.services[] | select(.name == env(SERVICE_NAME)) | .repository' "$CONFIG_FILE")
              
              if [ -z "$REPO" ]; then
                echo "::error::Could not find repository for service name '${SERVICE_NAME}' in $CONFIG_FILE"
                exit 1
              fi

              echo "service_repository=${ORG}/${REPO}" >> $GITHUB_OUTPUT

          - name: Split repository string
            id: split-repo
            run: |
              REPO_FULL="${{ steps.tenant-config.outputs.service_repository }}"
              OWNER=$(echo "$REPO_FULL" | cut -d'/' -f1)
              REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
              echo "owner=${OWNER}" >> $GITHUB_OUTPUT
              echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT

          - name: Generate GitHub App Token
            id: generate-token
            uses: actions/create-github-app-token@v1
            with:
              app-id: ${{ secrets.APP_ID }}
              private-key: ${{ secrets.APP_PRIVATE_KEY }}
              private-key-is-base64: true
              owner: ${{ steps.split-repo.outputs.owner }}
              repositories: ${{ steps.split-repo.outputs.repo_name }}

          - name: Checkout Service Code
            uses: actions/checkout@v4
            with:
              repository: ${{ steps.tenant-config.outputs.service_repository }}
              token: ${{ steps.generate-token.outputs.token }}
              path: 'service'

          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
              node-version: '18'
              cache: 'npm'
          
          - name: Setup PNPM
            uses: pnpm/action-setup@v2
            with:
              version: 8
              run_install: false

          - name: Get package manager
            id: package-manager
            working-directory: service
            run: |
              if [ -f "pnpm-lock.yaml" ]; then
                echo "manager=pnpm" >> $GITHUB_OUTPUT
                echo "command=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
              elif [ -f "yarn.lock" ]; then
                echo "manager=yarn" >> $GITHUB_OUTPUT
                echo "command=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
              else
                echo "manager=npm" >> $GITHUB_OUTPUT
                echo "command=npm ci" >> $GITHUB_OUTPUT
              fi

          - name: Install Dependencies
            working-directory: service
            run: ${{ steps.package-manager.outputs.command }}

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-actions-oidc-role-tenant-terraform
              aws-region: eu-west-1
              audience: sts.amazonaws.com

          - name: Set Domain Based on Stage
            id: set-domain
            working-directory: service
            run: |
              if [[ "${{ inputs.stage }}" == "prod" ]]; then
                echo "ROOT_DOMAIN=carousellabs.co" >> $GITHUB_ENV
              else
                echo "ROOT_DOMAIN=dev.carousellabs.co" >> $GITHUB_ENV
              fi

          - name: Install Serverless Framework
            working-directory: service
            run: npm install -g serverless

          - name: Deploy to AWS via Serverless
            working-directory: service
            run: serverless deploy --stage ${{ inputs.stage }} --tenant ${{ inputs.tenant }}
            env:
              AWS_REGION: eu-west-1
              SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}