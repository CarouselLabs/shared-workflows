name: Reusable Next.js Frontend Deployment

on:
  workflow_call:
    inputs:
      tenant:
        description: 'The tenant to deploy for'
        required: true
        type: string
      stage:
        description: 'The stage to deploy to (dev, prod)'
        required: true
        type: string
      service_name:
        description: 'The name of the service'
        required: true
        type: string
      aws-account-id:
        description: "The AWS Account ID for deployment"
        required: true
        type: string
      website_subdomain:
        description: 'Website subdomain. Uses default if not provided.'
        required: false
        type: string
    secrets:
      APP_ID:
        description: 'GitHub App ID for token generation'
        required: true
      APP_PRIVATE_KEY:
        description: 'GitHub App Private Key for token generation'
        required: true
      SERVERLESS_ACCESS_KEY:
        description: 'Serverless Framework access key'
        required: true

jobs:
  deploy-frontend:
    name: Deploy ${{ inputs.service_name }} to ${{ inputs.stage }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Generate Token for Orchestration Repo
        id: generate-orchestration-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          private-key-is-base64: true
          owner: 'CarouselLabs'

      - name: Checkout Orchestration Repo
        uses: actions/checkout@v4
        with:
          repository: CarouselLabs/TenantTerraform
          path: 'orchestration'
          token: ${{ steps.generate-orchestration-token.outputs.token }}

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read Tenant Config
        id: tenant-config
        working-directory: orchestration
        env:
          SERVICE_NAME: ${{ inputs.service_name }}
        run: |
          CONFIG_FILE="tenant-configurations/tenants/${{ inputs.tenant }}/config.yml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Tenant configuration file not found at $(pwd)/$CONFIG_FILE"
            exit 1
          fi

          echo "--- Debug: Contents of $CONFIG_FILE ---"
          cat "$CONFIG_FILE"
          echo "--- End Debug ---"

          ORG=$(yq e ".tenant.github_org" "$CONFIG_FILE")
          
          echo "--- YQ Debug ---"
          echo "Input service name from workflow: ${{ inputs.service_name }}"
          echo "SERVICE_NAME env var: ${SERVICE_NAME}"
          echo "Querying for repo: .services[] | select(.name == env(SERVICE_NAME)) | .repository"
          REPO=$(yq e '.services[] | select(.name == env(SERVICE_name)) | .repository' "$CONFIG_FILE")
          echo "--- End YQ Debug ---"

          if [ -z "$REPO" ]; then
            echo "::error::Could not find repository for service name '${SERVICE_NAME}' in $CONFIG_FILE"
            exit 1
          fi

          HOSTNAME=$(yq e ".domain_name.${{ inputs.stage }}.hostname" "$CONFIG_FILE")
          ZONE_ID=$(yq e ".domain_name.${{ inputs.stage }}.zone_id" "$CONFIG_FILE")
          
          echo "service_repository=${ORG}/${REPO}" >> $GITHUB_OUTPUT
          echo "hostname=${HOSTNAME}" >> $GITHUB_OUTPUT
          echo "zone_id=${ZONE_ID}" >> $GITHUB_OUTPUT

      - name: Split repository string
        id: split-repo
        run: |
          REPO_FULL="${{ steps.tenant-config.outputs.service_repository }}"
          OWNER=$(echo "$REPO_FULL" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
          echo "owner=${OWNER}" >> $GITHUB_OUTPUT
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          private-key-is-base64: true
          owner: ${{ steps.split-repo.outputs.owner }}
          repositories: ${{ steps.split-repo.outputs.repo_name }}

      - name: Checkout Service Code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.tenant-config.outputs.service_repository }}
          token: ${{ steps.generate-token.outputs.token }}
          path: 'service'

      - name: Detect Package Manager
        id: package-manager
        working-directory: service
        run: |
          if [ -f "pnpm-lock.yaml" ] || [ -f "pnpm-lock.json" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          elif [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "lockfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        working-directory: service
        run: pnpm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-actions-oidc-role-tenant-terraform
          aws-region: eu-west-1
          audience: sts.amazonaws.com

      - name: Set Domain Environment Variables
        id: set-domain
        run: |
          HOSTNAME="${{ steps.tenant-config.outputs.hostname }}"
          ZONE_ID="${{ steps.tenant-config.outputs.zone_id }}"
          WEBSITE_SUBDOMAIN="${{ inputs.website_subdomain }}"
          
          if [ -z "$HOSTNAME" ] || [ "$HOSTNAME" == "null" ]; then
            echo "::error::Hostname for stage '${{ inputs.stage }}' not found in config"
            exit 1
          fi

          if [ -z "$WEBSITE_SUBDOMAIN" ] || [ "$WEBSITE_SUBDOMAIN" == "null" ]; then
            echo "::warning::Website subdomain for stage '${{ inputs.stage }}' not found in config. Using 'www'."
            WEBSITE_SUBDOMAIN="www"
          fi

          ROOT_DOMAIN="$HOSTNAME"
          FULL_DOMAIN="$WEBSITE_SUBDOMAIN.$HOSTNAME"

          echo "ROOT_DOMAIN=${ROOT_DOMAIN}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${FULL_DOMAIN}" >> $GITHUB_ENV
          echo "ZONE_ID=${ZONE_ID}" >> $GITHUB_ENV
          
          echo "✅ Root domain: $ROOT_DOMAIN"
          echo "✅ Full domain: $FULL_DOMAIN"
          echo "✅ Zone ID: $ZONE_ID"

      - name: Install Serverless Framework
        working-directory: service
        run: pnpm add serverless@4

      - name: Deploy to AWS via Serverless
        working-directory: service
        run: |
          echo "Running serverless deploy for stage: ${{ inputs.stage }}"
          echo "Full domain for deployment: ${{ env.FULL_DOMAIN }}"
          pnpm serverless deploy --stage ${{ inputs.stage }}
        env:
          AWS_REGION: eu-west-1
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}