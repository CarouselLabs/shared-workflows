name: Reusable Next.js Frontend Deployment

on:
  workflow_call:
    inputs:
      tenant:
        description: 'The tenant to deploy for'
        required: true
        type: string
      stage:
        description: 'The stage to deploy to (dev, prod)'
        required: true
        type: string
      service_name:
        description: 'The name of the service'
        required: true
        type: string
      aws-account-id:
        description: "The AWS Account ID for deployment"
        required: true
        type: string

jobs:
  deploy-frontend:
    name: Deploy ${{ inputs.service_name }} to ${{ inputs.stage }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Orchestration Repo
        uses: actions/checkout@v4
        with:
          path: 'orchestration'

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read Tenant Config
        id: tenant-config
        working-directory: orchestration
        run: |
          CONFIG_FILE="tenant-configurations/tenants/${{ inputs.tenant }}/config.yml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Tenant configuration file not found at $CONFIG_FILE"
            exit 1
          fi

          ORG=$(yq e ".tenant.github_org" "$CONFIG_FILE")
          REPO=$(yq e '.services[] | select(.name == "${{ inputs.service_name }}") | .repository' "$CONFIG_FILE")
          HOSTNAME=$(yq e ".domain_name.${{ inputs.stage }}.hostname" "$CONFIG_FILE")
          WEBSITE_SUBDOMAIN=$(yq e '.websites[] | select(.name == "website") | .subdomain.${{ inputs.stage }}' "$CONFIG_FILE")
          
          echo "service_repository=${ORG}/${REPO}" >> $GITHUB_OUTPUT
          echo "hostname=${HOSTNAME}" >> $GITHUB_OUTPUT
          echo "website_subdomain=${WEBSITE_SUBDOMAIN}" >> $GITHUB_OUTPUT

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TENANT_SYNC_APP_ID }}
          private-key: ${{ secrets.TENANT_SYNC_APP_PRIVATE_KEY }}
          owner: ${{ steps.tenant-config.outputs.service_repository.split('/')[0] }}
          repositories: ${{ steps.tenant-config.outputs.service_repository.split('/')[1] }}

      - name: Checkout Service Code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.tenant-config.outputs.service_repository }}
          token: ${{ steps.generate-token.outputs.token }}
          path: 'service'

      - name: Detect Package Manager
        id: package-manager
        working-directory: service
        run: |
          if [ -f "pnpm-lock.yaml" ] || [ -f "pnpm-lock.json" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          elif [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "lockfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup PNPM
        if: steps.package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: ${{ steps.package-manager.outputs.manager }}
          cache-dependency-path: |
            service/package-lock.json
            service/yarn.lock
            service/pnpm-lock.yaml
            service/pnpm-lock.json

      - name: Install Dependencies
        working-directory: service
        run: |
          if [[ "${{ steps.package-manager.outputs.manager }}" == "pnpm" ]]; then
            # Try frozen lockfile first, fallback to no-frozen-lockfile if it fails
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
          else
            ${{ steps.package-manager.outputs.manager }} ${{ steps.package-manager.outputs.command }}
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-actions-oidc-role-tenant-terraform
          aws-region: eu-west-1
          audience: sts.amazonaws.com

      - name: Set Domain Environment Variables
        id: set-domain
        run: |
          HOSTNAME="${{ steps.tenant-config.outputs.hostname }}"
          WEBSITE_SUBDOMAIN="${{ steps.tenant-config.outputs.website_subdomain }}"
          
          if [ -z "$HOSTNAME" ] || [ "$HOSTNAME" == "null" ]; then
            echo "::error::Hostname for stage '${{ inputs.stage }}' not found in config"
            exit 1
          fi

          if [ -z "$WEBSITE_SUBDOMAIN" ] || [ "$WEBSITE_SUBDOMAIN" == "null" ]; then
            echo "::warning::Website subdomain for stage '${{ inputs.stage }}' not found in config. Using 'www'."
            WEBSITE_SUBDOMAIN="www"
          fi

          ROOT_DOMAIN="$HOSTNAME"
          FULL_DOMAIN="$WEBSITE_SUBDOMAIN.$HOSTNAME"

          echo "ROOT_DOMAIN=${ROOT_DOMAIN}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${FULL_DOMAIN}" >> $GITHUB_ENV
          
          echo "✅ Root domain: $ROOT_DOMAIN"
          echo "✅ Full domain: $FULL_DOMAIN"

      - name: Download Service Configuration
        working-directory: service
        run: |
          CONFIG_URL="https://raw.githubusercontent.com/CarouselLabs/service-configs/main/${{ inputs.service_name }}/serverless.yml"
          echo "Downloading config from $CONFIG_URL"
          curl -o serverless.yml -L "$CONFIG_URL"
          if ! [ -s serverless.yml ]; then
            echo "::error::Failed to download serverless.yml or file is empty."
            exit 1
          fi
          echo "✅ Downloaded serverless.yml"
          cat serverless.yml

      - name: Install Serverless Framework
        working-directory: service
        run: npm install -g serverless

      - name: Deploy to AWS via Serverless
        working-directory: service
        run: serverless deploy --stage ${{ inputs.stage }} --tenant ${{ inputs.tenant }} --root_domain ${{ env.ROOT_DOMAIN }} --full_domain ${{ env.FULL_DOMAIN }}
        env:
          AWS_REGION: eu-west-1
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }} 